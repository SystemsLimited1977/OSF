/**
*	OnDemandSubscription.ds
*	Perfroms the on demand subscription info service and returns the response.
* 	@input  item : Array
*	@input 	subscriptionID : String
*	@input 	purchaseTotals : Object
* 	@input  billTo : Object 
* 	@input  shipTo : Object
*	@output amount : String
* 	@output authorizationCode : String
*	@output authorizedDateTime : String
*	@output processorResponse : String
*	@output reconciliationID : String
*	@output decision : String
* 	@output reasonCode : Object
* 	@output requestID : Object
* 	@output requestToken : Object
* 	@output invalidField : Array
* 	@output missingField : Array
* 	@output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* 	@output StandardizedAddress : Object Contains any 'corrections' made to the address from standards point of view
* 	
*	@output DecisionManager : String Decision Manager XML response. Order Center support for Decision Manager requires this data in custom.bfDecisionManager attribute of exported order payment instruments.
* 	@input Order : dw.order.Order The current order
* 	@output SvedSubscriptionNumber : String
*/
importPackage( dw.system );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

	var subscriptionID : String = pdict.subscriptionID;
	pdict.SvedSubscriptionNumber = subscriptionID;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	
    var CybersourceHelper = getCybersourceHelper();
	
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	service.setTimeout(CybersourceHelper.getCsServiceRequestTimeout());
	
	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();

	CybersourceHelper.addOnDemandSubscriptionInfo(subscriptionID, request, purchaseObject, pdict.Order.getOrderNo(), billToObject, shipToObject, pdict.item);
	
	/********************************/
	/* DAV-related WebService setup */
	/********************************/	
	var enableDAV : String = CybersourceHelper.getDavEnable();
	var approveDAV : String = CybersourceHelper.getDavOnAddressVerificationFailure();
	
	if( enableDAV=='YES' ) {
		var ignoreDAVResult = false;
		if( approveDAV=='APPROVE' ) {
			ignoreDAVResult = true;
		}
		CybersourceHelper.addDAVRequestInfo(request,billToObject,shipToObject,ignoreDAVResult);
	}
	/* End of DAV WebService setup */
	
	/* AVS Service setup */
	var ignoreAVSResult : Boolean = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags : String = CybersourceHelper.getAvsDeclineFlags();
	
	/* Enable AVS Service for USA & Canada only */
	if(CybersourceHelper.getEnableAVSForUSAndCanada() && (billToObject.country.value == "US" || billToObject.country.value == "CA")){
		ignoreAVSResult = false;
	}
	else{
		ignoreAVSResult = true;
	}
	
	CybersourceHelper.addAVSRequestInfo(request,ignoreAVSResult,declineAVSFlags);
	/* End of AVS Service setup */
	
	//Enableing Cybersource Decesion Manager from Business Manager
	request.decisionManager = new CybersourceHelper.csReference.DecisionManager();
  	request.decisionManager.enabled = Site.getCurrent().getCustomPreferenceValue('enableDecisionManager');
		
	var response = null;
	// send request
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[libCybersource.ds] Error in subscription request ( {0} )",e.message);
		return PIPELET_ERROR;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	else
	{
		if(null!=response.ccAuthReply)
		{
			pdict.amount = response.ccAuthReply.amount;
			pdict.authorizationCode = response.ccAuthReply.authorizationCode;
			pdict.authorizedDateTime = response.ccAuthReply.authorizedDateTime;
			pdict.processorResponse = response.ccAuthReply.processorResponse;
			//pdict.reasonCode = response.ccAuthReply.reasonCode;
			pdict.reasonCode = response.reasonCode.get();
			pdict.reconciliationID = response.ccAuthReply.reconciliationID;
			pdict.decision = response.decision;
			pdict.requestID = response.requestID;
			pdict.requestToken = response.requestToken;
			
			
			// Capture Decision Manager response XML. Demandware Order Center support 
			// for Decision Manager requires this data in custom.bfDecisionManager 
			// attribute of exported order payment instruments.
			var strDecMangager : String;
			var cdatawrap : String = "<![CDATA[{0}]]>";
			
			
			strDecMangager = "<CyberSourceDecisionManagerResponse>\n";
			strDecMangager = strDecMangager + "<MerchantReferenceCode>" + response.merchantReferenceCode + "</MerchantReferenceCode>\n";
			strDecMangager = strDecMangager + "<RequestId>" + response.requestID + "</RequestId>\n";
			
			strDecMangager = strDecMangager + "<ReasonCode>" + response.reasonCode.get() + "</ReasonCode>\n";
			strDecMangager = strDecMangager + "<Decision>" + response.decision + "</Decision>\n"; 
			
			//AFS CALL
		
			if(null != response.afsReply)
			{
			strDecMangager = strDecMangager + "<AfsResult>" + response.afsReply.afsResult.get() + "</AfsResult>\n";
			
			if(response.afsReply.afsFactorCode == null){
			strDecMangager = strDecMangager + "<AfsFactorCode></AfsFactorCode>\n";
			}
			else{
			strDecMangager = strDecMangager + "<AfsFactorCode>" + response.afsReply.afsFactorCode + "</AfsFactorCode>\n";
			}
			strDecMangager = strDecMangager + "<BinCountry></BinCountry>\n";
			strDecMangager = strDecMangager + "<IpCountry>" + response.afsReply.ipCountry + "</IpCountry>\n";
			strDecMangager = strDecMangager + "<IpCity>" + response.afsReply.ipCity + "</IpCity>\n";
			strDecMangager = strDecMangager + "<IpState>" + response.afsReply.ipState + "</IpState>\n";
			strDecMangager = strDecMangager + "<IpRoutingMethod>" + response.afsReply.ipRoutingMethod + "</IpRoutingMethod>\n";
			}
			else{
			strDecMangager = strDecMangager + "<AfsResult></AfsResult>\n";
			strDecMangager = strDecMangager + "<AfsFactorCode></AfsFactorCode>\n";
			strDecMangager = strDecMangager + "<BinCountry></BinCountry>\n";
			strDecMangager = strDecMangager + "<IpCountry></IpCountry>\n";
			strDecMangager = strDecMangager + "<IpCity></IpCity>\n";
			strDecMangager = strDecMangager + "<IpState></IpState>\n";
			strDecMangager = strDecMangager + "<IpRoutingMethod></IpRoutingMethod>\n";
			}
	
			//NOTHING FOR NOW
			strDecMangager = strDecMangager + "<DeviceFingerprint>\n";
			strDecMangager = strDecMangager + "<CookiesEnabled></CookiesEnabled>\n";
			strDecMangager = strDecMangager + "<FlashEnabled></FlashEnabled>\n";
			strDecMangager = strDecMangager + "<Hash></Hash>\n";
			strDecMangager = strDecMangager + "<ImagesEnabled></ImagesEnabled>\n";
			strDecMangager = strDecMangager + "<JavascriptEnabled></JavascriptEnabled>\n";
			strDecMangager = strDecMangager + "<ProxyIPAddress></ProxyIPAddress>\n";
			strDecMangager = strDecMangager + "<ProxyIPAddressActivities></ProxyIPAddressActivities>\n";
			strDecMangager = strDecMangager + "<ProxyIPAddressAttributes></ProxyIPAddressAttributes>\n";
			strDecMangager = strDecMangager + "<ProxyServerType></ProxyServerType>\n";
			strDecMangager = strDecMangager + "<TrueIPAddress></TrueIPAddress>\n";
			strDecMangager = strDecMangager + "<TrueIPAddressActivities></TrueIPAddressActivities>\n";
			strDecMangager = strDecMangager + "<TrueIPAddressAttributes></TrueIPAddressAttributes>\n";
			strDecMangager = strDecMangager + "<TrueIPAddressCity></TrueIPAddressCity>\n";
			strDecMangager = strDecMangager + "<TrueIPAddressCountry></TrueIPAddressCountry>\n";
			strDecMangager = strDecMangager + "</DeviceFingerprint>\n";
			
			
			//DecisionReply.activeProfileReply.name
			
			strDecMangager = strDecMangager + "<RulesTriggered>\n";
			strDecMangager = strDecMangager + "<RuleResultItem>\n";
			strDecMangager = strDecMangager + "<Name></Name>\n";
			strDecMangager = strDecMangager + "<Decision>"+ response.decision +"</Decision>\n";
			strDecMangager = strDecMangager + "<Evaluation>T</Evaluation>\n";
			strDecMangager = strDecMangager + "<RuleID></RuleID>\n";
			strDecMangager = strDecMangager + "</RuleResultItem>\n";
			strDecMangager = strDecMangager + "</RulesTriggered>\n";
			strDecMangager = strDecMangager + "</CyberSourceDecisionManagerResponse>";
			
			var strDecMagXML : XML = new XML(strDecMangager.toString());
			pdict.DecisionManager = StringUtils.format(cdatawrap, strDecMagXML.toXMLString());
			
			//end decesion manager
		}
		else
		{
			pdict.decision = response.decision;
			pdict.requestID = response.requestID;
			pdict.requestToken = response.requestToken;
			pdict.reasonCode = response.reasonCode;
			pdict.invalidField = response.invalidField;
			pdict.missingField = response.missingField;
		}
		
		/**********************************************/
		/* DAV-related WebService response processing */
		/**********************************************/
		if(null != response.davReply){
			pdict.DAVReasonCode = response.davReply.reasonCode.get();			
			if( !empty(response.davReply.standardizedAddress1) ) {
				var stdAddress : Object = new Object();
				stdAddress.firstName = pdict.shipTo.firstName;
				stdAddress.lastName = pdict.shipTo.lastName;
				stdAddress.address1 = response.davReply.standardizedAddress1;
				stdAddress.address2 = response.davReply.standardizedAddress2;
				stdAddress.city = response.davReply.standardizedCity;
				stdAddress.state = response.davReply.standardizedState;
				stdAddress.postalCode = response.davReply.standardizedPostalCode;
				stdAddress.country = response.davReply.standardizedCountry;
				pdict.StandardizedAddress = stdAddress;
			}
		}
		/* End of DAV response processing */
	}
	return PIPELET_NEXT;
}

